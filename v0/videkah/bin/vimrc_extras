"set smartindent


set tabstop=4
set shiftwidth=4
set expandtab

"====[ Set up smarter search behaviour ]=======================

"set background=dark
colors default

set incsearch       "Lookahead as search pattern is specified
set ignorecase      "Ignore case in all searches...
set smartcase       "...unless uppercase letters used
set hlsearch        "Highlight all matches

" cursor stuff . 
highlight iCursor guifg=cyan guibg=steelblue
highlight Cursor guifg=white guibg=steelblue

highlight EOLWS ctermbg=red guibg=red

"=====[ trailing space highlight ]==========================
"autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
"autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
"autocmd BufReadPost * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/

"autocmd InsertEnter * syn clear EOLWS | syn match EOLWS /\s\+\%#\@!$/
"autocmd InsertLeave * syn clear EOLWS | syn match EOLWS /\s\+$/
"autocmd BufReadPost * syn clear EOLWS | syn match EOLWS /\s\+$/

augroup formatingExcessSpace
    autocmd!
    autocmd InsertEnter * syn clear EOLWS | match EOLWS /\s\+\%#\@!$/
    autocmd InsertLeave * syn clear EOLWS | match EOLWS /\s\+$/
    autocmd BufReadPost * syn clear EOLWS | match EOLWS /\s\+$/
augroup END

"set list
"set listchars=trail:â‚¬


set backspace=indent,eol,start      "BS past autoindents, line boundaries,
                                    "     and even the start of insertion

"=====[ Miscellaneous features (mainly options) ]=====================

set title           "Show filename in titlebar of window
set titleold=

set nomore          "Don't page long listings

set autoread        "Always reload buffer when external changes detected

"           +--Disable hlsearch while loading viminfo
"           | +--Remember marks for last 50 files
"           | |   +--Remember up to 10000 lines in each register
"           | |   |      +--Remember up to 1MB in each register
"           | |   |      |     +--Remember last 1000 search patterns
"           | |   |      |     |     +---Remember last 1000 commands
"           | |   |      |     |     |
"           v v   v      v     v     v
set viminfo=h,'50,<10000,s1000,/1000,:1000

set backspace=indent,eol,start      "BS past autoindents, line boundaries,
                                    "     and even the start of insertion

set fileformats=unix,mac,dos        "Handle Mac and DOS line-endings
                                    "but prefer Unix endings


set wildmode=list:longest,full      "Show list of completions
                                    "  and complete as much as possible,
                                    "  then iterate full completions

set noshowmode                      "Suppress mode change messages

set updatecount=10                  "Save buffer every 10 chars typed

set textwidth=3000                    "Wrap at column 78

" Keycodes and maps timeout in 3/10 sec...
set timeout timeoutlen=300 ttimeoutlen=300

set thesaurus+=~/Documents/thesaurus    "Add thesaurus file for ^X^T
set dictionary+=~/Documents/dictionary  "Add dictionary file for ^X^K


set scrolloff=4                     "Scroll when 2 lines from top/bottom

set ruler                           "Show cursor location info on status line

" Use space to jump down a page (like browsers do)...
"" nnoremap <Space> <PageDown>






"=====[ Enable smartwrapping ]==================================

" No smartwrapping in any of these files...
"let g:SW_IGNORE_FILES = '.vimrc,*.vim,*.pl,*.pm,**/bin/**'

" set comments-=s1:/*,mb:*,ex:*/      "Don't recognize C comments
" set comments-=:XCOMM                "Don't recognize lmake comments
" set comments-=:%                    "Don't recognize PostScript comments
" set comments-=:#                    "Don't recognize Perl/shell comments
" set comments+=fb:*                  "Star-space is a bullet
" set comments+=fb:-                  "Dash-space is a bullets

set formatoptions-=cro

set wrapmargin=2                            "Wrap 2 characters from the edge of the window


" need a quick way of switching on and off autoindent and smartindent 

"map . :set autoindent<cr>:set smartindent<cr>
"map , :set noautoindent<cr>:set nosmartindent<cr>

"set autoindent                              "Retain indentation on next line
"set smartindent                             "Turn on autoindenting of blocks


"set cinwords = ""                           "But not for C-like keywords
inoremap # X<C-H>#|                         "And no magic outdent for comments


"" nnoremap <silent> >> :call ShiftLine()<CR>| "And no shift magic on comments

"ctrl-s to save :-D
" DOESN'T WORK, need to switch off ctrl-s in TTY ... hmmm...
"map   <C-s>  :w   



set tabpagemax=15
" C-tab is the same as frickin tab . so the following doesn't work :-
"map   <C-tab>  :b#<cr>:echo @%<cr>


" move with ctrl up or down
map   <C-up> <C-y>
map   <C-down> <C-e>


"complete and utter rubbish that should get an error
" the flicking between tabs is controlled well by the TAB key !!!!!
"map   <F4>  :tabprevious<cr>:echo @%<cr>
"map   <F3>  :tabnext<cr>:echo @%<cr>


let &titlestring = $TITLE
if &term == "screen"
  set t_ts=^[k
  set t_fs=^[\
endif
if &term == "screen" || &term == "xterm"
  set title
endif

"====[ Use persistent undo ]=================
if has('persistent_undo')
    set undodir=$HOME/tmp/.VIM_UNDO_FILES
    set undolevels=5000
    set undofile
endif

"TODO: remap u to prompt when first undoing into a previous session's history
" (probably by calling undotree when the buffer is loaded,
"  remembering the current sequence number, and comparing it on each undo


"====[ Goto last location in non-empty files ]=======


"====[ I'm sick of typing :%s/.../.../g ]=======

nmap S  [Shortcut for :s///g]  :%s//g<LEFT><LEFT>
vmap S                         :s//g<LEFT><LEFT>


"====[ Toggle visibility of naughty characters ]============

" Make naughty characters visible...
" (uBB is right double angle, uB7 is middle dot)
" KARL : i find this painful on copy n paste operations. 
"exec \"set lcs=tab:\uBB\uBB,trail:\uB7,nbsp:~\"            <remove the \ from slash-double-quotes

"augroup VisibleNaughtiness
"    autocmd!
"    autocmd BufEnter  *       set list
"    autocmd BufEnter  *.txt   set nolist
"    autocmd BufEnter  *.vp*   set nolist
"    autocmd BufEnter  *       if !&modifiable
"    autocmd BufEnter  *           set nolist
"    autocmd BufEnter  *       endif
"augroup END



"=====[ Make Visual modes work better ]==================

" Visual Block mode is far more useful that Visual mode (so swap the commands)...
" err , I don't think so !! (KARL)

"nnoremap v <C-V>
"nnoremap <C-V> v

"vnoremap v <C-V>
"vnoremap <C-V> v



"Square up visual selections...
set virtualedit=block

" Make BS/DEL work as expected in visual modes (i.e. delete the selected text)...
vmap <BS> x

" Make vaa select the entire file...
vmap aa VGo1G

" When shifting, retain selection over multiple shifts...
vmap <expr> > KeepVisualSelection(">")
vmap <expr> < KeepVisualSelection("<")

function! KeepVisualSelection(cmd)
    if mode() ==# "V"
        return a:cmd . "gv"
    else
        return a:cmd
    endif
endfunction

" Temporarily add a column indicator when inserting or appending in visual mode...
" (Should use <C-O> instead, but it doesn't seem to work)
vnoremap <silent>  I  I<C-R>=TemporaryColumnMarkerOn()<CR>
vnoremap <silent>  A  A<C-R>=TemporaryColumnMarkerOn()<CR>

function! TemporaryColumnMarkerOn ()
    let g:prev_cursorcolumn_state = g:cursorcolumn_visible ? 'on' : 'off'
    call Toggle_CursorColumn('on')
    inoremap <silent>  <ESC>  <ESC>:call TemporaryColumnMarkerOff(g:prev_cursorcolumn_state)<CR>
    return ""
endfunction

function! TemporaryColumnMarkerOff (newstate)
    call Toggle_CursorColumn(a:newstate)
    iunmap <ESC>
endfunction

"==== configure the cursor

highlight Cursor guifg=white guibg=black
highlight iCursor guifg=white guibg=steelblue
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver100-iCursor
set guicursor+=n-v-c:blinkon0
set guicursor+=i:blinkwait10



"#########################################################################
" shift-tab = previous  tab
map   <S-tab>  :bprev<cr>:echo @%<cr>

" tab = next tab
map   <tab>    :bnext<cr>:echo @%<cr>


"#########################################################################
" function f keys :-
" f2 = (echo) show current file name
map  <f2>     :echo @%<cr>

nmap <F3><f3> :buffers<cr>:b<Space>
nmap <f3> :b #<cr>

" the show-file-subs button
map  <F4>  :TlistToggle<cr>
"let Tlist_File_Fold_Auto_Close = 1
" following line opens with list TlistToggle on
"let Tlist_Auto_Open = 1

map  <f5>  :tabnew .<cr>

map <f6> :q<cr>
"map <leader><f6> :qa<cr>

"map <f7> :!clear;cplist2RELEASE;cp /home/khoskin/runlist/rt182740-newUnFeb13 /home/khoskin/devweb-root-mount/export/home/khoskin/restartPOOL/RUNSTUFF<cr>
"map <f7> :!clear;cplist2RELEASE;. /etc/bash_completion.d/git;runlist "`__git_ps1`"<cr>
"map <f7> :!clear;cplist2RELEASE touch;cplist2HEAD touch<cr>
"map <s-f7> :!clear;cplist2HEAD touch<cr>
"map <f7> :!clear;cplist2TEST touch<cr>
"map <f7> :!clear;cplist2HEAD touch<cr>
"map <f7> :!clear;cplist2RELEASE touch<cr>
"map <f7> :!clear;cplist2chef52 touch<cr>
map <f7> :!clear;cplist2chef51 touch<cr>

" TODO need a prompt for the cplist2 options . I need to be able to deploy to more than one codeinst
" in fact F7 could be a "run" command. and somewhere in videkah there is a list of commands to run.
" some of these could be for deploying the code , others for well whatever script we want to regularly run.


"" map <f8> and <f8><f8> has videkah specific connitations . so that has moved to the videkah section

"map <c-s> :w<cr>
map <f9> :w<cr>

" f11 , also leader-e . e for explorer, as in file explorer.
map <f11>     :NERDTree<cr>


set pastetoggle=<F12>
map <Leader>i :set paste<cr>i


" <Leader>a is used by perlstacktrace "add" point.

" Leader commands
" leader-b show-buffers
"map <Leader>b :buffers<cr>:b<Space>
map <Leader>b :b#<cr>

map <Leader>ca :%s/^/#/g<cr>:%s/^#\+/#/g<cr>

" leader-e : e for file explorer
map <Leader>e :NERDTree<cr>

" a way using <Leader>f to search for the last search string and find the next open buffer with the last search string, and open that buffer.


"nmap <Leader><Leader><left> :echo "L L left !!!"


" leader-h no-syntax-highlighting . also known as 'hugo' button ( hence h )
map <Leader>h :if exists("syntax_on") <Bar> syntax off <Bar> else <Bar> syntax on <Bar> endif <CR>:echo @%<cr>

" leader-k : 'debug looking here' line
map <Leader>k <esc>0i# debug looking here # TODO rm this line<cr><esc>
map <Leader>l /debug looking here<cr>


map <Leader>g :call GitBlame(@%)<cr>
function! GitBlame (filename)
   echo "BLHAAHAHHAHA " 
    exec '!git blame -w '.a:filename
endfunction

" <Leader>m is being used to toggle mouse usage below.

" leader-n : line numbering
map <Leader>n :set invnumber<cr>

" leader-o : re-open-file
map <Leader>o :e.<cr>

" leader-p : shebang perl line . with a use strict ,  warnings n Data::Dumper.
map <Leader>p <esc>1G0i#!/usr/bin/perl<cr>use warnings;<cr>use strict;<cr>use 5.14.2;<cr>use Data::Dumper;<cr><esc>
map <Leader>pp <esc>1G0ipackage  ;<cr>use warnings;<cr>use strict;<cr>use Data::Dumper;<cr><esc>

" leader-q : quit
map <Leader>q :quit<cr>

nmap <Leader>r <esc>A # TODO rm this line<cr><esc>

" leader-s : see below
" leader-t : terminal , well ConqueTerm-Bash terminal.
map <leader>t :ConqueTerm bash<cr>
map tt :ConqueTerm bash<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" splitting windows, and nav between the windows.
" leader-s : split window horizontally
map <Leader>s :split<cr>
" leader-v : split window vertically
map <Leader>v :vsplit<cr>
"" this doesn't work :map <1-LeftMouse>v :vsplit<cr>

"alt-s   strip trailing spaces
"map <S-F12> :%s/\s\+$//

" move with ctrl up or down ( when you have split windows )
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" toggle the pesky mouse functionality
nnoremap mm :call ToggleMouse()<CR>
nnoremap <leader>m :call ToggleMouse()<CR>

function! ToggleMouse()
  if &mouse == 'a'
    set mouse=
    echo "Mouse usage disabled"
  else
    set mouse=a
    echo "Mouse usage enabled"
  endif
endfunction

"map <s-f12> :call BrowserRTTicket ()<CR>
"map <f12> :call Browser ()<CR>
"function! Browser ()
"    " attempt to find an http[s] link in the current line
"    let line = getline (".")
"    let httplink = matchstr (line, "http[s]*://[^ ,;\t]*")
"    if httplink ==""
"        let httplink = matchstr (line, "www\.[^ ,;\t]*")
"    endif
"
"    " Venda specific : look for a 4 or more digit number and assume it's an rt ticket number
"    " only if we don't already have a link to open.
"    if httplink == ""
"        let matchnum = matchstr (line, "[0-9][0-9][0-9][0-9][0-9]*")
"        if matchnum != ""
"            let httplink = "http://rt.uk.venda.com/Ticket/Display.html?id=".matchnum
"        endif
"    endif
"
"    " if we've got something to open , open it in firefox
"    if httplink != ""
"        exec ":silent !firefox ".httplink." & "
"        exec ":redraw!"
"        echo "found link : ".httplink
"    else
"        echo "Couldn't http link in current line"
"    endif
"
"endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" whitespace and commenting functions. Not really a core part of videkah navigation
"
vmap <Leader><space> :call VisualSelectionTrimTrailingSpace_n_tabs2spaces()<cr>
function! VisualSelectionTrimTrailingSpace_n_tabs2spaces()

    " TODO . the <leader><space> could do with working on single lines .

    " on the current visual selection trim all trailing spaces at the end of lines
    " also convert all leading tabs into 4 spaces.

    let [lnum1, col1] = getpos("'<")[1:2]
    let [lnum2, col2] = getpos("'>")[1:2]

    let ln = lnum1

    while ln <= lnum2

        let linestr = getline(ln)

        " strip of trailing spaces :-
        let linestr = substitute ( linestr, '\s\+$','','' )

        " TODO the whole changing leading tabs to spaces doesn't yet work .
        " change leading tabs to 4 spaces :-
        "let origlinestr = linestr
        "
        "let linestr = substitute ( linestr, '^\t','    ','' )

        call setline( ln, linestr )
        let ln += 1
    endwhile

endfunction

"dog       
"gone    
"nuts      


vmap <leader>rm <esc>:call Visual_append_rm_this_line()<cr>

function! Visual_append_rm_this_line()

echo "Visual_append_rm_this_line !!"
echo "Visual_append_rm_this_line !!"
echo "Visual_append_rm_this_line !!"
echo "Visual_append_rm_this_line !!"

endfunction

" adding and removing hashes at the front of a line functions
nmap <leader># <esc>0i#<esc>j0i#<esc>j0i#<esc>j
vmap <leader># <esc>:call Hashline()<cr>
vmap <leader>## <esc>:call RemoveLeadingHashline('one')<cr>
vmap <leader>### <esc>:call RemoveLeadingHashline('multi')<cr>
function! Hashline()

    let [lnum1, col1] = getpos("'<")[1:2]
    let [lnum2, col2] = getpos("'>")[1:2]

    let ln = lnum1

    while ln <= lnum2
        call setline(ln,"#".getline(ln))
        let ln += 1
    endwhile

endfunction

function! RemoveLeadingHashline(oneOrMulti)

    let [lnum1, col1] = getpos("'<")[1:2]
    let [lnum2, col2] = getpos("'>")[1:2]

    let ln = lnum1

    while ln <= lnum2

        if ( a:oneOrMulti ) == 'multi'
            call setline( ln , substitute(getline(ln),'^\#\+',"","") )
        else
            call setline( ln , substitute(getline(ln),'^\#',"","") )
        endif

        let ln += 1
    endwhile

endfunction



